//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.YarpControl
{
    [Serializable]
    public class VelocityMsg : Message
    {
        public const string k_RosMessageName = "yarp_control_msgs/Velocity";
        public override string RosMessageName => k_RosMessageName;

        //  Message used to send velocity commands to one or multiple joints
        //  names: it can contain the names of the joints to send the velocity command to. If left empty, a velocity value for all the joints available must be provided
        //  velocities: it must contain a velocity value for each name listed in the names vector or for every joint if the names vector is left empty
        //  ref_accelerations: it can contain the acceleration value for each velocities vector entry. It must contain the same number of elements as the velocity array or be empty. If empty the already set acceleration values will to be used
        public string[] names;
        public double[] velocities;
        public double[] ref_accelerations;

        public VelocityMsg()
        {
            this.names = new string[0];
            this.velocities = new double[0];
            this.ref_accelerations = new double[0];
        }

        public VelocityMsg(string[] names, double[] velocities, double[] ref_accelerations)
        {
            this.names = names;
            this.velocities = velocities;
            this.ref_accelerations = ref_accelerations;
        }

        public static VelocityMsg Deserialize(MessageDeserializer deserializer) => new VelocityMsg(deserializer);

        private VelocityMsg(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.names, deserializer.ReadLength());
            deserializer.Read(out this.velocities, sizeof(double), deserializer.ReadLength());
            deserializer.Read(out this.ref_accelerations, sizeof(double), deserializer.ReadLength());
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.WriteLength(this.names);
            serializer.Write(this.names);
            serializer.WriteLength(this.velocities);
            serializer.Write(this.velocities);
            serializer.WriteLength(this.ref_accelerations);
            serializer.Write(this.ref_accelerations);
        }

        public override string ToString()
        {
            return "VelocityMsg: " +
            "\nnames: " + System.String.Join(", ", names.ToList()) +
            "\nvelocities: " + System.String.Join(", ", velocities.ToList()) +
            "\nref_accelerations: " + System.String.Join(", ", ref_accelerations.ToList());
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
