//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.YarpControl
{
    [Serializable]
    public class GetAvailableControlModesRequest : Message
    {
        public const string k_RosMessageName = "yarp_control_msgs/GetAvailableControlModes";
        public override string RosMessageName => k_RosMessageName;

        //  Service used to retrieve the available control modes
        //  only_implemented: if True, only the control mode that are currently implemented in the device code will be returned
        public bool only_implemented;

        public GetAvailableControlModesRequest()
        {
            this.only_implemented = false;
        }

        public GetAvailableControlModesRequest(bool only_implemented)
        {
            this.only_implemented = only_implemented;
        }

        public static GetAvailableControlModesRequest Deserialize(MessageDeserializer deserializer) => new GetAvailableControlModesRequest(deserializer);

        private GetAvailableControlModesRequest(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.only_implemented);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.only_implemented);
        }

        public override string ToString()
        {
            return "GetAvailableControlModesRequest: " +
            "\nonly_implemented: " + only_implemented.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
